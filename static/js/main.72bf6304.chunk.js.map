{"version":3,"sources":["Components/Cell.js","Components/Row.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useState","editedUser","setEditedUser","editedField","setEditedField","user","id","i","index","type","value","onChange","e","field","newUser","name","target","username","email","phone","address","city","website","company","onEditCellChange","onClick","onUserSave","disabled","trim","setIsAnotherCellEdited","onDoubleClick","cellValue","data","isAnotherCellEdited","Row","columns","map","el","key","Search","searchValue","setSearchValue","className","placeholder","searchSave","App","users","setUsers","isSpinnerShown","setIsSpinnerShown","searchFieldsArray","setSearchFieldsArray","searchString","cloneArr","updatedUsers","href","axios","method","url","then","response","catch","error","console","log","scope","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.72bf6304.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Cell(props) {\r\n  const [editedUser, setEditedUser] = useState({});\r\n  const [editedField, setEditedField] = useState({});\r\n\r\n  const editMode = (user, i, cellValue) => {\r\n    if (!props.isAnotherCellEdited) {\r\n      // блокирует одновременное редактирование другой ячейки\r\n      setEditedUser(user);\r\n      setEditedField({ index: i, value: cellValue });\r\n      props.setIsAnotherCellEdited(true); // блокирует одновременное редактирование другой ячейки\r\n    }\r\n  };\r\n\r\n  const onEditCellChange = (e, i) => {\r\n    const columns = [\r\n      \"id\",\r\n      \"name\",\r\n      \"username\",\r\n      \"email\",\r\n      \"phone\",\r\n      \"city\",\r\n      \"website\",\r\n      \"company\",\r\n    ];\r\n    const field = columns[i];\r\n    let newUser = {};\r\n    if (field === \"name\") newUser = { ...editedUser, name: e.target.value };\r\n    if (field === \"username\")\r\n      newUser = { ...editedUser, username: e.target.value };\r\n    if (field === \"email\") newUser = { ...editedUser, email: e.target.value };\r\n    if (field === \"phone\") newUser = { ...editedUser, phone: e.target.value };\r\n    if (field === \"city\") {\r\n      newUser = { ...editedUser };\r\n      newUser.address.city = e.target.value;\r\n    }\r\n    if (field === \"website\")\r\n      newUser = { ...editedUser, website: e.target.value };\r\n    if (field === \"company\") {\r\n      newUser = { ...editedUser };\r\n      newUser.company.name = e.target.value;\r\n    }\r\n    setEditedUser(newUser);\r\n    setEditedField({ index: i, value: e.target.value });\r\n  };\r\n\r\n  const cellSave = () => {\r\n    props.onUserSave(editedUser);\r\n    setEditedUser({}); // refactor: можно это всё убрать в cellCancel(), но понимание ухудшится\r\n    setEditedField({});\r\n  };\r\n\r\n  const cellCancel = () => {\r\n    setEditedUser({});\r\n    setEditedField({});\r\n    props.setIsAnotherCellEdited(false); // позволяет снова открыть редактирование другой ячейки\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      {props.user.id === editedUser.id && props.i === editedField.index ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={editedField.value}\r\n            onChange={(e) => onEditCellChange(e, props.i)}\r\n          />\r\n          <button onClick={cellSave} disabled={!editedField.value.trim()}>\r\n            Save\r\n          </button>\r\n          <button onClick={cellCancel}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <span onDoubleClick={() => editMode(props.user, props.i, props.data)}>\r\n          {props.data}\r\n        </span>\r\n      )}\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nfunction Row(props) {\r\n\r\n  const columns = [ // columns of the table\r\n    props.user.id,\r\n    props.user.name,\r\n    props.user.username,\r\n    props.user.email,\r\n    props.user.phone,\r\n    props.user.address.city,\r\n    props.user.website,\r\n    props.user.company.name\r\n  ];\r\n\r\n  return (\r\n    <tr>\r\n      {columns.map((el,i) => <Cell\r\n        key={i}\r\n        i={i}             // номер передаваемой колонки\r\n        data={el}         // что написать в колонке\r\n        user={props.user} // объект user\r\n        onUserSave={props.onUserSave}\r\n        isAnotherCellEdited={props.isAnotherCellEdited}\r\n        setIsAnotherCellEdited={props.setIsAnotherCellEdited}\r\n      />)}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n\r\n\r\n// вывести данные пользователей в таблицу - ok\r\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей","import React, {useState} from \"react\";\r\n\r\nfunction Search(props) {\r\n  const [searchValue, setSearchValue] = useState('');\r\n\r\n  const searchFieldChanged = (e) => {\r\n    setSearchValue(e.target.value);\r\n    props.searchSave(searchValue, props.i);\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"form-control form-control-sm\" // Search fields\r\n      type=\"text\"\r\n      placeholder=\"filter...\"\r\n      onChange={searchFieldChanged}\r\n      value={searchValue}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Search;\r\n\r\n// вывести данные пользователей в таблицу - ok\r\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей\r\n","import React, {useEffect, useState} from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport Row from \"./Components/Row\";\r\nimport Search from \"./Components/Search\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nfunction App() {\r\n    // const searchIcon = (\r\n    //   <svg\r\n    //     className=\"bi bi-search\"\r\n    //     width=\"1em\"\r\n    //     height=\"1em\"\r\n    //     viewBox=\"0 0 16 16\"\r\n    //     fill=\"currentColor\"\r\n    //     xmlns=\"http://www.w3.org/2000/svg\"\r\n    //   >\r\n    //     <path\r\n    //       fillRule=\"evenodd\"\r\n    //       d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"\r\n    //     />\r\n    //     <path\r\n    //       fillRule=\"evenodd\"\r\n    //       d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"\r\n    //     />\r\n    //   </svg>\r\n    // );\r\n\r\n  const columns = [\r\n    \"Name\",\r\n    \"Username\",\r\n    \"Email\",\r\n    \"Phone\",\r\n    \"City\",\r\n    \"Website\",\r\n    \"Company\",\r\n  ];\r\n  const [users, setUsers] = useState([]);\r\n  const [isAnotherCellEdited, setIsAnotherCellEdited] = useState(false);\r\n  const [isSpinnerShown, setIsSpinnerShown] = useState(false);\r\n  const [searchFieldsArray, setSearchFieldsArray] = useState([]);\r\n\r\n    const searchSave = (searchString, index) => {\r\n        // for <Search> component\r\n        const cloneArr = [...searchFieldsArray];\r\n        cloneArr[index] = searchString;\r\n        setSearchFieldsArray(cloneArr);\r\n        // setSearchFieldsArray(cloneArr); // вот эта строка рождает проблему сброса всех значений search\r\n    }\r\n\r\n\r\n    const onUserSave = (user) => {\r\n        const updatedUsers = users.map((el) => {\r\n            // заменить user в общем списке users\r\n            if (el.id === user.id) return {...user};\r\n            else return el;\r\n        });\r\n        setUsers(updatedUsers); // залить новый список users в State\r\n        setIsAnotherCellEdited(false); // позволяет снова открыть редактирование другой ячейки\r\n    };\r\n\r\n    const requestHttp = () => {\r\n        setIsSpinnerShown(true);\r\n\r\n        // console.log('Load');\r\n\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //   .then(response => response.json())\r\n        //   .then(json => {\r\n        //     setUsers(json);\r\n        //     }\r\n        //   );\r\n\r\n        axios({\r\n            method: 'get',\r\n            url: 'https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/users',\r\n        })\r\n            .then((response) => {\r\n                setUsers(response.data);\r\n                setIsSpinnerShown(false);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <a\r\n                href=\"https://github.com/BackToTheStars/react-axios/tree/master/src\"\r\n                className=\"ml-2\"\r\n            >\r\n                https://github.com/BackToTheStars/react-axios/tree/master/src\r\n            </a>\r\n            <br/>\r\n            <p></p>\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary ml-2\"\r\n                onClick={requestHttp}\r\n                disabled={isSpinnerShown}\r\n            >\r\n                Load\r\n            </button>\r\n            {isSpinnerShown && <span className=\"ml-3\">Loading...</span>}\r\n            <p></p>\r\n            {users[0] ? (\r\n                <>\r\n                    <table className=\"table\">\r\n                        <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            {columns.map((el, i) => (\r\n                                <th key={i} scope=\"col\">\r\n                                    {el}\r\n                                    <Search i={i} searchSave={searchSave}/>\r\n                                    {/*🔍*/}\r\n                                    {/*<div className=\"line\">*/}\r\n                                    {/*  <input className=\"search\"*/}\r\n                                    {/*         value=\"search\">{null}</input>*/}\r\n                                    {/*  <span className=\"search ml-1\">{searchIcon}</span>*/}\r\n                                    {/*</div>*/}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {users.map((el) => (\r\n                            <Row\r\n                                key={el.id}\r\n                                user={el}\r\n                                onUserSave={onUserSave}\r\n                                isAnotherCellEdited={isAnotherCellEdited}\r\n                                setIsAnotherCellEdited={setIsAnotherCellEdited}\r\n                            />\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <p className=\"ml-2\">No data loaded yet - please press \"Load\"</p>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n// вывести данные пользователей в таблицу\r\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}