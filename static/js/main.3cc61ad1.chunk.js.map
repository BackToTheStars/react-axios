{"version":3,"sources":["Components/Cell.js","Components/Row.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useState","editedUser","setEditedUser","editedField","setEditedField","user","id","i","index","type","value","onChange","e","field","newUser","name","target","username","email","phone","address","city","website","company","onEditCellChange","onClick","onUserSave","disabled","trim","setIsAnotherCellEdited","onDoubleClick","cellValue","data","isAnotherCellEdited","Row","columns","map","el","key","Search","searchValue","setSearchValue","className","placeholder","event","preventDefault","searchSave","App","users","setUsers","isSpinnerShown","setIsSpinnerShown","searchFieldsArray","setSearchFieldsArray","searchString","cloneArray","console","log","updatedUsers","href","axios","method","url","then","response","scope","uuidv4","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0SAkFeA,MAhFf,SAAcC,GAAQ,IAAD,EACiBC,mBAAS,IAD1B,mBACZC,EADY,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAEZG,EAFY,KAECC,EAFD,KAyDnB,OACE,4BACGL,EAAMM,KAAKC,KAAOL,EAAWK,IAAMP,EAAMQ,IAAMJ,EAAYK,MAC1D,oCACE,2BACEC,KAAK,OACLC,MAAOP,EAAYO,MACnBC,SAAU,SAACC,GAAD,OAnDK,SAACA,EAAGL,GAC3B,IAUMM,EAVU,CACd,KACA,OACA,WACA,QACA,QACA,OACA,UACA,WAEoBN,GAClBO,EAAU,GACA,SAAVD,IAAkBC,EAAO,2BAAQb,GAAR,IAAoBc,KAAMH,EAAEI,OAAON,SAClD,aAAVG,IACFC,EAAO,2BAAQb,GAAR,IAAoBgB,SAAUL,EAAEI,OAAON,SAClC,UAAVG,IAAmBC,EAAO,2BAAQb,GAAR,IAAoBiB,MAAON,EAAEI,OAAON,SACpD,UAAVG,IAAmBC,EAAO,2BAAQb,GAAR,IAAoBkB,MAAOP,EAAEI,OAAON,SACpD,SAAVG,KACFC,EAAO,eAAQb,IACPmB,QAAQC,KAAOT,EAAEI,OAAON,OAEpB,YAAVG,IACFC,EAAO,2BAAQb,GAAR,IAAoBqB,QAASV,EAAEI,OAAON,SACjC,YAAVG,KACFC,EAAO,eAAQb,IACPsB,QAAQR,KAAOH,EAAEI,OAAON,OAElCR,EAAcY,GACdV,EAAe,CAAEI,MAAOD,EAAGG,MAAOE,EAAEI,OAAON,QAsBlBc,CAAiBZ,EAAGb,EAAMQ,MAE7C,4BAAQkB,QArBC,WACf1B,EAAM2B,WAAWzB,GACjBC,EAAc,IACdE,EAAe,KAkBkBuB,UAAWxB,EAAYO,MAAMkB,QAAxD,QAGA,4BAAQH,QAlBG,WACjBvB,EAAc,IACdE,EAAe,IACfL,EAAM8B,wBAAuB,KAevB,WAGF,0BAAMC,cAAe,kBApETzB,EAoEwBN,EAAMM,KApExBE,EAoE8BR,EAAMQ,EApEjCwB,EAoEoChC,EAAMiC,UAnE9DjC,EAAMkC,sBAET/B,EAAcG,GACdD,EAAe,CAAEI,MAAOD,EAAGG,MAAOqB,IAClChC,EAAM8B,wBAAuB,KALhB,IAACxB,EAAME,EAAGwB,IAqElBhC,EAAMiC,QC5CFE,MA5Bf,SAAanC,GAEX,IAAMoC,EAAU,CACdpC,EAAMM,KAAKC,GACXP,EAAMM,KAAKU,KACXhB,EAAMM,KAAKY,SACXlB,EAAMM,KAAKa,MACXnB,EAAMM,KAAKc,MACXpB,EAAMM,KAAKe,QAAQC,KACnBtB,EAAMM,KAAKiB,QACXvB,EAAMM,KAAKkB,QAAQR,MAGrB,OACE,4BACGoB,EAAQC,KAAI,SAACC,EAAG9B,GAAJ,OAAU,kBAAC,EAAD,CACrB+B,IAAK/B,EACLA,EAAGA,EACHyB,KAAMK,EACNhC,KAAMN,EAAMM,KACZqB,WAAY3B,EAAM2B,WAClBO,oBAAqBlC,EAAMkC,oBAC3BJ,uBAAwB9B,EAAM8B,8BCHvBU,MApBf,SAAgBxC,GAAQ,IAAD,EACiBC,mBAAS,IAD1B,mBACdwC,EADc,KACDC,EADC,KASrB,OACE,2BACEC,UAAU,+BACVjC,KAAK,OACLkC,YAAY,YACZhC,SAAU,SAACC,GAAD,OAXcgC,EAWYhC,EAXLJ,EAWQT,EAAMQ,EAV/CqC,EAAMC,iBACNJ,EAAeG,EAAM5B,OAAON,YAC5BX,EAAM+C,WAAWF,EAAM5B,OAAON,MAAOF,GAHZ,IAACoC,EAAOpC,GAY/BE,MAAO8B,K,QC0IEO,MApJf,WAqBE,IArBa,EA8Ba/C,mBAAS,IA9BtB,mBA8BNgD,EA9BM,KA8BCC,EA9BD,OA+ByCjD,oBAAS,GA/BlD,mBA+BNiC,EA/BM,KA+BeJ,EA/Bf,OAgC+B7B,oBAAS,GAhCxC,mBAgCNkD,EAhCM,KAgCUC,EAhCV,OAiCqCnD,mBAAS,CAEzD,GACA,GACA,GACA,GACA,GACA,GACA,KAzCW,mBAiCNoD,EAjCM,KAiCaC,EAjCb,KA4CPP,EAAa,SAACQ,EAAc9C,GAEhC,IAAI+C,EAAaH,EAAkBhB,KAAI,SAACC,EAAI9B,GAC1C,OAAIA,IAAMC,EAAc8C,EACZjB,KAEdgB,EAAqBE,GACrBC,QAAQC,IAAIF,IAGR7B,EAAa,SAACrB,GAClB,IAAMqD,EAAeV,EAAMZ,KAAI,SAACC,GAE9B,OAAIA,EAAG/B,KAAOD,EAAKC,GAAW,eAAKD,GACvBgC,KAEdY,EAASS,GACT7B,GAAuB,IAwBzB,OACE,6BACE,6BACA,uBACE8B,KAAK,gEACLjB,UAAU,QAFZ,iEAMA,6BACA,4BACA,4BACEjC,KAAK,SACLiC,UAAU,uBACVjB,QAnCc,WAClB0B,GAAkB,GAWlBS,IAAM,CACJC,OAAQ,MACRC,IAAK,+CACJC,MAAK,SAACC,GACPf,EAASe,EAAShC,MAClBmB,GAAkB,OAmBhBxB,SAAUuB,GAJZ,QAQCA,GAAkB,0BAAMR,UAAU,QAAhB,cACnB,4BACCM,EAAM,GACL,oCACE,2BAAON,UAAU,SACf,2BAAOA,UAAU,eACf,4BACE,wBAAIuB,MAAM,OAAV,KA1FE,CACd,OACA,WACA,QACA,QACA,OACA,UACA,WAoFqB7B,KAAI,SAACC,EAAI9B,GAAL,OACX,wBAAI+B,IAAK4B,eAAUD,MAAM,OACtB5B,EACD,kBAAC,EAAD,CAAQ9B,EAAGA,EAAGuC,WAAYA,UAWlC,+BACGE,EAAMZ,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CACEC,IAAKD,EAAG/B,GACRD,KAAMgC,EACNX,WAAYA,EACZO,oBAAqBA,EACrBJ,uBAAwBA,UAOlC,oCACE,uBAAGa,UAAU,QAAb,+CCxIUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.3cc61ad1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Cell(props) {\n  const [editedUser, setEditedUser] = useState({});\n  const [editedField, setEditedField] = useState({});\n\n  const editMode = (user, i, cellValue) => {\n    if (!props.isAnotherCellEdited) {\n      // блокирует одновременное редактирование другой ячейки\n      setEditedUser(user);\n      setEditedField({ index: i, value: cellValue });\n      props.setIsAnotherCellEdited(true); // блокирует одновременное редактирование другой ячейки\n    }\n  };\n\n  const onEditCellChange = (e, i) => {\n    const columns = [\n      \"id\",\n      \"name\",\n      \"username\",\n      \"email\",\n      \"phone\",\n      \"city\",\n      \"website\",\n      \"company\",\n    ];\n    const field = columns[i];\n    let newUser = {};\n    if (field === \"name\") newUser = { ...editedUser, name: e.target.value };\n    if (field === \"username\")\n      newUser = { ...editedUser, username: e.target.value };\n    if (field === \"email\") newUser = { ...editedUser, email: e.target.value };\n    if (field === \"phone\") newUser = { ...editedUser, phone: e.target.value };\n    if (field === \"city\") {\n      newUser = { ...editedUser };\n      newUser.address.city = e.target.value;\n    }\n    if (field === \"website\")\n      newUser = { ...editedUser, website: e.target.value };\n    if (field === \"company\") {\n      newUser = { ...editedUser };\n      newUser.company.name = e.target.value;\n    }\n    setEditedUser(newUser);\n    setEditedField({ index: i, value: e.target.value });\n  };\n\n  const cellSave = () => {\n    props.onUserSave(editedUser);\n    setEditedUser({}); // refactor: можно это всё убрать в cellCancel(), но понимание ухудшится\n    setEditedField({});\n  };\n\n  const cellCancel = () => {\n    setEditedUser({});\n    setEditedField({});\n    props.setIsAnotherCellEdited(false); // позволяет снова открыть редактирование другой ячейки\n  };\n\n  return (\n    <td>\n      {props.user.id === editedUser.id && props.i === editedField.index ? (\n        <>\n          <input\n            type=\"text\"\n            value={editedField.value}\n            onChange={(e) => onEditCellChange(e, props.i)}\n          />\n          <button onClick={cellSave} disabled={!editedField.value.trim()}>\n            Save\n          </button>\n          <button onClick={cellCancel}>Cancel</button>\n        </>\n      ) : (\n        <span onDoubleClick={() => editMode(props.user, props.i, props.data)}>\n          {props.data}\n        </span>\n      )}\n    </td>\n  );\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nfunction Row(props) {\n\n  const columns = [ // columns of the table\n    props.user.id,\n    props.user.name,\n    props.user.username,\n    props.user.email,\n    props.user.phone,\n    props.user.address.city,\n    props.user.website,\n    props.user.company.name\n  ];\n\n  return (\n    <tr>\n      {columns.map((el,i) => <Cell\n        key={i}\n        i={i}             // номер передаваемой колонки\n        data={el}         // что написать в колонке\n        user={props.user} // объект user\n        onUserSave={props.onUserSave}\n        isAnotherCellEdited={props.isAnotherCellEdited}\n        setIsAnotherCellEdited={props.setIsAnotherCellEdited}\n      />)}\n    </tr>\n  );\n};\n\nexport default Row;\n\n\n// вывести данные пользователей в таблицу - ok\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей","import React, { useState } from \"react\";\n\nfunction Search(props) {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const searchFieldChanged = (event, index) => {\n    event.preventDefault();\n    setSearchValue(event.target.value);\n    props.searchSave(event.target.value, index);\n  };\n\n  return (\n    <input\n      className=\"form-control form-control-sm\" // Search fields\n      type=\"text\"\n      placeholder=\"filter...\"\n      onChange={(e) => searchFieldChanged(e, props.i)}\n      value={searchValue}\n    />\n  );\n}\n\nexport default Search;\n\n// вывести данные пользователей в таблицу - ok\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Row from \"./Components/Row\";\nimport Search from \"./Components/Search\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction App() {\n  // const searchIcon = (\n  //   <svg\n  //     className=\"bi bi-search\"\n  //     width=\"1em\"\n  //     height=\"1em\"\n  //     viewBox=\"0 0 16 16\"\n  //     fill=\"currentColor\"\n  //     xmlns=\"http://www.w3.org/2000/svg\"\n  //   >\n  //     <path\n  //       fillRule=\"evenodd\"\n  //       d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"\n  //     />\n  //     <path\n  //       fillRule=\"evenodd\"\n  //       d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"\n  //     />\n  //   </svg>\n  // );\n\n  const columns = [\n    \"Name\",\n    \"Username\",\n    \"Email\",\n    \"Phone\",\n    \"City\",\n    \"Website\",\n    \"Company\",\n  ];\n  const [users, setUsers] = useState([]);\n  const [isAnotherCellEdited, setIsAnotherCellEdited] = useState(false);\n  const [isSpinnerShown, setIsSpinnerShown] = useState(false);\n  const [searchFieldsArray, setSearchFieldsArray] = useState([\n    // for <Search> component\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n  ]);\n\n  const searchSave = (searchString, index) => {\n    // for <Search> component\n    let cloneArray = searchFieldsArray.map((el, i) => {\n      if (i === index) return searchString;\n      else return el;\n    });\n    setSearchFieldsArray(cloneArray); // вот эта строка рождает проблему сброса всех значений search\n    console.log(cloneArray);\n  };\n\n  const onUserSave = (user) => {\n    const updatedUsers = users.map((el) => {\n      // заменить user в общем списке users\n      if (el.id === user.id) return { ...user };\n      else return el;\n    });\n    setUsers(updatedUsers); // залить новый список users в State\n    setIsAnotherCellEdited(false); // позволяет снова открыть редактирование другой ячейки\n  };\n\n  const requestHttp = () => {\n    setIsSpinnerShown(true);\n\n    // console.log('Load');\n\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(json => {\n    //     setUsers(json);\n    //     }\n    //   );\n\n    axios({\n      method: \"get\",\n      url: \"https://jsonplaceholder.typicode.com/users\",\n    }).then((response) => {\n      setUsers(response.data);\n      setIsSpinnerShown(false);\n    });\n  };\n\n  return (\n    <div>\n      <br />\n      <a\n        href=\"https://github.com/BackToTheStars/react-axios/tree/master/src\"\n        className=\"ml-2\"\n      >\n        https://github.com/BackToTheStars/react-axios/tree/master/src\n      </a>\n      <br />\n      <p></p>\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary ml-2\"\n        onClick={requestHttp}\n        disabled={isSpinnerShown}\n      >\n        Load\n      </button>\n      {isSpinnerShown && <span className=\"ml-3\">Loading...</span>}\n      <p></p>\n      {users[0] ? (\n        <>\n          <table className=\"table\">\n            <thead className=\"thead-light\">\n              <tr>\n                <th scope=\"col\">#</th>\n                {columns.map((el, i) => (\n                  <th key={uuidv4()} scope=\"col\">\n                    {el}\n                    <Search i={i} searchSave={searchSave} />\n                    {/*🔍*/}\n                    {/*<div className=\"line\">*/}\n                    {/*  <input className=\"search\"*/}\n                    {/*         value=\"search\">{null}</input>*/}\n                    {/*  <span className=\"search ml-1\">{searchIcon}</span>*/}\n                    {/*</div>*/}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {users.map((el) => (\n                <Row\n                  key={el.id}\n                  user={el}\n                  onUserSave={onUserSave}\n                  isAnotherCellEdited={isAnotherCellEdited}\n                  setIsAnotherCellEdited={setIsAnotherCellEdited}\n                />\n              ))}\n            </tbody>\n          </table>\n        </>\n      ) : (\n        <>\n          <p className=\"ml-2\">No data loaded yet - please press \"Load\"</p>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// вывести данные пользователей в таблицу\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}