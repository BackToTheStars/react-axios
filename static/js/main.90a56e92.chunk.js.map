{"version":3,"sources":["Components/Cell.js","Components/Row.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useState","editedUser","setEditedUser","editedField","setEditedField","user","id","i","index","type","value","onChange","e","field","newUser","name","target","username","email","phone","address","city","website","company","onEditCellChange","onClick","onUserSave","disabled","trim","setIsAnotherCellEdited","onDoubleClick","cellValue","data","isAnotherCellEdited","Row","columns","map","el","key","App","users","setUsers","isSpinnerShown","setIsSpinnerShown","filters","setFilters","list","setList","searchSave","updatedFilters","toLowerCase","filter","includes","console","log","updatedUsers","isLoading","setIsLoading","handleScroll","window","innerHeight","Math","round","document","documentElement","scrollTop","offsetHeight","useEffect","getMoreData","addEventListener","removeEventListener","axios","method","url","then","response","cloneUsers","catch","error","href","className","scope","placeholder","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.90a56e92.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Cell(props) {\r\n  const [editedUser, setEditedUser] = useState({});\r\n  const [editedField, setEditedField] = useState({});\r\n\r\n  const editMode = (user, i, cellValue) => {\r\n    if (!props.isAnotherCellEdited) {\r\n      // блокирует одновременное редактирование другой ячейки\r\n      setEditedUser(user);\r\n      setEditedField({ index: i, value: cellValue });\r\n      props.setIsAnotherCellEdited(true); // блокирует одновременное редактирование другой ячейки\r\n    }\r\n  };\r\n\r\n  const onEditCellChange = (e, i) => {\r\n    const columns = [\r\n      \"id\",\r\n      \"name\",\r\n      \"username\",\r\n      \"email\",\r\n      \"phone\",\r\n      \"city\",\r\n      \"website\",\r\n      \"company\",\r\n    ];\r\n    const field = columns[i];\r\n    let newUser = {};\r\n    if (field === \"name\") newUser = { ...editedUser, name: e.target.value };\r\n    if (field === \"username\")\r\n      newUser = { ...editedUser, username: e.target.value };\r\n    if (field === \"email\") newUser = { ...editedUser, email: e.target.value };\r\n    if (field === \"phone\") newUser = { ...editedUser, phone: e.target.value };\r\n    if (field === \"city\") {\r\n      newUser = { ...editedUser };\r\n      newUser.address.city = e.target.value;\r\n    }\r\n    if (field === \"website\")\r\n      newUser = { ...editedUser, website: e.target.value };\r\n    if (field === \"company\") {\r\n      newUser = { ...editedUser };\r\n      newUser.company.name = e.target.value;\r\n    }\r\n    setEditedUser(newUser);\r\n    setEditedField({ index: i, value: e.target.value });\r\n  };\r\n\r\n  const cellSave = () => {\r\n    props.onUserSave(editedUser);\r\n    setEditedUser({}); // refactor: можно это всё убрать в cellCancel(), но понимание ухудшится\r\n    setEditedField({});\r\n  };\r\n\r\n  const cellCancel = () => {\r\n    setEditedUser({});\r\n    setEditedField({});\r\n    props.setIsAnotherCellEdited(false); // позволяет снова открыть редактирование другой ячейки\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      {props.user.id === editedUser.id && props.i === editedField.index ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={editedField.value}\r\n            onChange={(e) => onEditCellChange(e, props.i)}\r\n          />\r\n          <button onClick={cellSave} disabled={!editedField.value.trim()}>\r\n            Save\r\n          </button>\r\n          <button onClick={cellCancel}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <span onDoubleClick={() => editMode(props.user, props.i, props.data)}>\r\n          {props.data}\r\n        </span>\r\n      )}\r\n    </td>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\nimport Cell from './Cell';\n\nfunction Row(props) {\n\n  const columns = [ // columns of the table\n    props.user.id,\n    props.user.name,\n    props.user.username,\n    props.user.email,\n    props.user.phone,\n    props.user.address.city,\n    props.user.website,\n    props.user.company.name\n  ];\n\n  return (\n    <tr>\n      {columns.map((el,i) => <Cell\n        key={i}\n        i={i}             // номер передаваемой колонки\n        data={el}         // что написать в колонке\n        user={props.user} // объект user\n        onUserSave={props.onUserSave}\n        isAnotherCellEdited={props.isAnotherCellEdited}\n        setIsAnotherCellEdited={props.setIsAnotherCellEdited}\n      />)}\n    </tr>\n  );\n};\n\nexport default Row;\n\n\n// вывести данные пользователей в таблицу - ok\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Row from \"./Components/Row\";\n// import Search from \"./Components/Search\";\n// import { v4 as uuidv4 } from \"uuid\";\n\nfunction App() {\n  const columns = [\n    \"Name\",\n    \"Username\",\n    \"Email\",\n    \"Phone\",\n    \"City\",\n    \"Website\",\n    \"Company\",\n  ];\n  const [users, setUsers] = useState([]);\n  const [isAnotherCellEdited, setIsAnotherCellEdited] = useState(false);\n  const [isSpinnerShown, setIsSpinnerShown] = useState(false);\n\n  const [filters, setFilters] = useState({\n    name: \"\",\n    username: \"\",\n    email: \"\",\n    phone: \"\",\n    city: \"\",\n    website: \"\",\n    company: \"\",\n  });\n\n  // for <Search> component\n  const [list, setList] = useState(users);\n\n  const searchSave = (value, i) => {\n    const updatedFilters = { ...filters };\n\n    updatedFilters[columns[i].toLowerCase()] = value;\n    setFilters(updatedFilters);\n\n    setList(\n      users.filter((el) => {\n        return (\n          el.name.toLowerCase().includes(updatedFilters.name.toLowerCase()) &&\n          el.username\n            .toLowerCase()\n            .includes(updatedFilters.username.toLowerCase()) &&\n          el.email.toLowerCase().includes(updatedFilters.email.toLowerCase()) &&\n          el.phone.toLowerCase().includes(updatedFilters.phone.toLowerCase()) &&\n          el.address.city\n            .toLowerCase()\n            .includes(updatedFilters.city.toLowerCase()) &&\n          el.website\n            .toLowerCase()\n            .includes(updatedFilters.website.toLowerCase()) &&\n          el.company.name\n            .toLowerCase()\n            .includes(updatedFilters.company.toLowerCase())\n        );\n      })\n    );\n    console.log(updatedFilters);\n    console.log(list);\n  };\n\n  const resetFilters = () => {\n    setFilters({\n      name: \"\",\n      username: \"\",\n      email: \"\",\n      phone: \"\",\n      city: \"\",\n      website: \"\",\n      company: \"\",\n    });\n    setList(users);\n  };\n\n  // ******* end for <Search /> component\n\n  const onUserSave = (user) => {\n    const updatedUsers = users.map((el) => {\n      // заменить user в общем списке users\n      if (el.id === user.id) return { ...user };\n      else return el;\n    });\n    setUsers(updatedUsers); // залить новый список users в State\n    setList(updatedUsers); // для Search\n    setIsAnotherCellEdited(false); // позволяет снова открыть редактирование другой ячейки\n    searchSave();\n  };\n\n  const requestHttp = () => {\n    setIsSpinnerShown(true);\n    axios({\n      method: \"get\",\n      url:\n        // \"https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/users\",\n        \"https://jsonplaceholder.typicode.com/users\",\n    })\n      .then((response) => {\n        setUsers(response.data);\n        setList(response.data); // для Search\n        setIsSpinnerShown(false);\n        handleScroll(); // сразу запускаем проверку, находится ли низ таблицы внизу страницы.\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // ************* Infinite scroll adder\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleScroll = () => {\n    const innerHeight = window.innerHeight;\n    const scrollTop = Math.round(document.documentElement.scrollTop);\n    const offsetHeight = document.documentElement.offsetHeight;\n    if (innerHeight + scrollTop < offsetHeight - 100) return;\n    setIsLoading(true);\n  };\n\n  useEffect(() => {\n    if (!isLoading) return;\n    getMoreData();\n  }, [isLoading]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  });\n\n  const getMoreData = () => {\n    setIsLoading(true);\n    axios({\n      method: \"get\",\n      url: \"https://jsonplaceholder.typicode.com/users\",\n    })\n      .then((response) => {\n        let cloneUsers = [...users, ...response.data];\n        cloneUsers = cloneUsers.map((el, i) => {\n          return { ...el, id: i + 1 };\n        });\n        setUsers(cloneUsers);\n        setList(cloneUsers); // **************** для Search\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  // *********  End of Infinite scroll adder\n\n  return (\n    <div>\n      <br />\n      <a\n        href=\"https://github.com/BackToTheStars/react-axios/tree/master/src\"\n        className=\"ml-2\"\n      >\n        https://github.com/BackToTheStars/react-axios/tree/master/src\n      </a>\n      <br />\n      <p></p>\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary ml-2\"\n        onClick={requestHttp}\n        disabled={isSpinnerShown}\n      >\n        Load\n      </button>\n      {isSpinnerShown && <span className=\"ml-3\">Loading...</span>}\n      <p></p>\n      {users[0] ? (\n        <>\n          <button\n            className=\"btn btn-secondary ml-2 mb-3\"\n            onClick={resetFilters}\n          >\n            Reset filters\n          </button>\n          <table className=\"table\">\n            <thead className=\"thead-light\">\n              <tr>\n                <th scope=\"col\">#</th>\n                {columns.map((el, i) => (\n                  <th key={i} scope=\"col\">\n                    {el}\n                    {/*<Search*/}\n                    {/*  i={i}*/}\n                    {/*  searchSave={searchSave}*/}\n                    {/*  resetSearch={resetSearch}*/}\n                    {/*  setResetSearch={setResetSearch}*/}\n                    {/*/>*/}\n                    <input\n                      className=\"form-control form-control-sm\" // Search fields\n                      type=\"text\"\n                      placeholder=\"filter...\"\n                      onChange={(e) => searchSave(e.target.value, i)}\n                      value={filters[columns[i].toLowerCase()]}\n                    />\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {/*{users.map((el) => (*/}\n              {list.map((el) => (\n                <Row\n                  key={el.id}\n                  user={el}\n                  onUserSave={onUserSave}\n                  isAnotherCellEdited={isAnotherCellEdited}\n                  setIsAnotherCellEdited={setIsAnotherCellEdited}\n                />\n              ))}\n            </tbody>\n          </table>\n        </>\n      ) : (\n        <>\n          <p className=\"ml-2\">No data loaded yet - please press \"Load\"</p>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// вывести данные пользователей в таблицу\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей\n\n// const searchIcon = (\n//   <svg\n//     className=\"bi bi-search\"\n//     width=\"1em\"\n//     height=\"1em\"\n//     viewBox=\"0 0 16 16\"\n//     fill=\"currentColor\"\n//     xmlns=\"http://www.w3.org/2000/svg\"\n//   >\n//     <path\n//       fillRule=\"evenodd\"\n//       d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"\n//     />\n//     <path\n//       fillRule=\"evenodd\"\n//       d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"\n//     />\n//   </svg>\n// );\n\n// console.log(\n//   \"innerHeight=\" +\n//     innerHeight +\n//     \", scrollTop=\" +\n//     scrollTop +\n//     \", offsetHeight=\" +\n//     offsetHeight\n// );\n\n// console.log('Load');\n\n// fetch('https://jsonplaceholder.typicode.com/users')\n//   .then(response => response.json())\n//   .then(json => {\n//     setUsers(json);\n//     }\n//   );\n\n// {/*🔍*/}\n// {/*<div className=\"line\">*/}\n// {/*  <input className=\"search\"*/}\n// {/*         value=\"search\">{null}</input>*/}\n// {/*  <span className=\"search ml-1\">{searchIcon}</span>*/}\n// {/*</div>*/}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}