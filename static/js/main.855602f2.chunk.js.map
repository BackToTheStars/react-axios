{"version":3,"sources":["Components/Cell.js","Components/Row.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","useState","editedUser","setEditedUser","editedField","setEditedField","user","id","i","index","type","value","onChange","e","field","newUser","name","target","username","email","phone","address","city","website","company","onEditCellChange","onClick","onUserSave","disabled","trim","setIsAnotherCellEdited","onDoubleClick","cellValue","data","isAnotherCellEdited","Row","columns","map","el","key","App","users","setUsers","updatedUsers","href","className","axios","method","url","then","response","scope","uuidv4","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.855602f2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Row from \"./Row\";\n\nfunction Cell(props) {\n\n  const [editedUser, setEditedUser] = useState({});\n  const [editedField, setEditedField] = useState({});\n\n\n  const editMode = (user, i, cellValue) => {\n    if (!props.isAnotherCellEdited) {       // блокирует одновременное редактирование другой ячейки\n      setEditedUser(user);\n      setEditedField({index: i, value: cellValue})\n      props.setIsAnotherCellEdited(true);   // блокирует одновременное редактирование другой ячейки\n    };\n  }\n\n  const onEditCellChange = (e, i) => {\n    const columns=['id','name', 'username', 'email', 'phone', 'city', 'website', 'company'];\n    const field=columns[i];\n    let newUser = {};\n    if (field==='name')     newUser = {...editedUser, name: e.target.value};\n    if (field==='username') newUser = {...editedUser, username: e.target.value};\n    if (field==='email')    newUser = {...editedUser, email: e.target.value};\n    if (field==='phone')    newUser = {...editedUser, phone: e.target.value};\n    if (field==='city')   { newUser = {...editedUser}; newUser.address.city = e.target.value };\n    if (field==='website')  newUser = {...editedUser, website: e.target.value};\n    if (field==='company'){ newUser = {...editedUser}; newUser.company.name = e.target.value };\n    setEditedUser(newUser);\n    setEditedField({index: i, value: e.target.value});\n  }\n\n  const cellSave = () => {\n    props.onUserSave(editedUser);\n    setEditedUser({});  // refactor: можно это всё убрать в cellCancel(), но понимание ухудшится\n    setEditedField({});\n  };\n\n  const cellCancel = () => {\n    setEditedUser({});\n    setEditedField({});\n    props.setIsAnotherCellEdited(false);  // позволяет снова открыть редактирование другой ячейки\n  };\n\n  return (\n    <td >\n      {(props.user.id === editedUser.id) && (props.i === editedField.index) ? (\n        <>\n          <input type=\"text\"\n                 value={editedField.value}\n                 onChange={(e) => onEditCellChange(e, props.i)}\n          />\n          <button onClick={cellSave} disabled={!editedField.value.trim()}>Save</button>\n          <button onClick={cellCancel}>Cancel</button>\n        </>\n      ) : (\n        <span onDoubleClick={() => editMode(props.user, props.i, props.data)}>{props.data}</span>\n      )}\n    </td>\n  );\n};\n\nexport default Cell;\n\n\n\n","import React from 'react';\nimport Cell from './Cell';\n\nfunction Row(props) {\n\n  const columns = [ // columns of the table\n    props.user.id,\n    props.user.name,\n    props.user.username,\n    props.user.email,\n    props.user.phone,\n    props.user.address.city,\n    props.user.website,\n    props.user.company.name\n  ];\n\n  return (\n    <tr>\n      {columns.map((el,i) => <Cell\n        key={i}\n        i={i}             // номер передаваемой колонки\n        data={el}         // что написать в колонке\n        user={props.user} // объект user\n        onUserSave={props.onUserSave}\n        isAnotherCellEdited={props.isAnotherCellEdited}\n        setIsAnotherCellEdited={props.setIsAnotherCellEdited}\n      />)}\n    </tr>\n  );\n};\n\nexport default Row;\n\n\n// вывести данные пользователей в таблицу - ok\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей","import React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Row from './Components/Row'\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n\n  const searchIcon = <svg className=\"bi bi-search\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                          xmlns=\"http://www.w3.org/2000/svg\">\n                          <path fillRule=\"evenodd\"\n                          d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"/>\n                          <path fillRule=\"evenodd\"\n                          d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"/>\n                     </svg>\n\n  const columns=['Name', 'Username', 'Email', 'Phone', 'City', 'Website', 'Company'];\n  const [users, setUsers] = useState([]);\n  const [isAnotherCellEdited, setIsAnotherCellEdited] = useState(false);\n\n  const onUserSave = (user) => {\n    const updatedUsers = users.map((el) => {   // заменить user в общем списке users\n      if (el.id === user.id) return {...user};\n      else return el;\n    });\n    setUsers(updatedUsers);                    // залить новый список users в State\n    setIsAnotherCellEdited(false);        // позволяет снова открыть редактирование другой ячейки\n  }\n\n  const requestHttp = () => {\n\n    // console.log('Load');\n\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(json => {\n    //     setUsers(json);\n    //     }\n    //   );\n\n    axios({\n      method: 'get',\n      url: 'https://jsonplaceholder.typicode.com/users',\n    })\n      .then((response) => {\n        setUsers(response.data);\n        // console.log(response.data);\n      });\n  };\n\n  return (\n    <div>\n      <br />\n      <a href=\"https://github.com/BackToTheStars/react-axios/tree/master/src\"\n         className=\"ml-2\">\n        https://github.com/BackToTheStars/react-axios/tree/master/src\n      </a>\n      <br />\n      <p></p>\n      <button type=\"submit\" className=\"btn btn-primary ml-2\"\n              onClick={requestHttp}>Load</button>\n      <p></p>\n      {users[0] ? (\n        <>\n          <table className=\"table\">\n            <thead className=\"thead-light\">\n            <tr>\n              <th scope=\"col\">#</th>\n              {columns.map((el) =>\n                <th key={uuidv4()} scope=\"col\">{el}\n                  <input className=\"ml-3\" size=\"12\"\n                         value=' search'\n                  >{null}</input>\n                  {/*<span>{searchIcon}</span>*/}\n                </th>\n                )}\n            </tr>\n            </thead>\n            <tbody>\n            {users.map(el => <Row key={el.id}\n                                  user={el}\n                                  onUserSave={onUserSave}\n                                  isAnotherCellEdited={isAnotherCellEdited}\n                                  setIsAnotherCellEdited={setIsAnotherCellEdited}\n            />)}\n            </tbody>\n          </table>\n        </>\n      ) : (\n        <>\n          <p className=\"ml-2\">No data loaded yet - please press \"Load\"</p>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n// вывести данные пользователей в таблицу\n// возможность добавлять и удалять пользователей// возможность добавлять и удалять пользователей","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}